import os
import zipfile
import tempfile
import shutil
from pathlib import Path
import subprocess
import sys


def check_dependencies():
    """Check if required dependencies are installed"""
    try:
        from pxr import Usd, UsdGeom, Gf
        return True
    except ImportError:
        print("USD Python library not found. Please install it first:")
        print("pip install usd-core")
        return False


def extract_usdz(usdz_path, temp_dir):
    """Extract USDZ file to temporary directory"""
    try:
        with zipfile.ZipFile(usdz_path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        return True
    except Exception as e:
        print(f"Error extracting USDZ file: {e}")
        return False


def find_usd_file(temp_dir):
    """Find the main USD file in extracted directory"""
    usd_files = list(Path(temp_dir).glob('*.usd')) + list(Path(temp_dir).glob('*.usda'))
    if usd_files:
        return str(usd_files[0])
    return None


def convert_usd_to_obj(usd_file, obj_output_path):
    """Convert USD file to OBJ using USD Python API"""
    try:
        from pxr import Usd, UsdGeom, Gf

        # Open USD stage
        stage = Usd.Stage.Open(usd_file)
        if not stage:
            print(f"Failed to open USD file: {usd_file}")
            return False

        vertices = []
        faces = []
        normals = []
        uvs = []
        vertex_offset = 1  # OBJ files are 1-indexed

        # Traverse all mesh prims in the stage
        for prim in stage.Traverse():
            if prim.IsA(UsdGeom.Mesh):
                mesh = UsdGeom.Mesh(prim)

                # Get mesh data
                points_attr = mesh.GetPointsAttr()
                faces_attr = mesh.GetFaceVertexIndicesAttr()
                face_counts_attr = mesh.GetFaceVertexCountsAttr()

                if points_attr and faces_attr and face_counts_attr:
                    # Get vertex positions
                    points = points_attr.Get()
                    if points:
                        for point in points:
                            vertices.append(f"v {point[0]} {point[1]} {point[2]}")

                    # Get face data
                    face_indices = faces_attr.Get()
                    face_counts = face_counts_attr.Get()

                    if face_indices and face_counts:
                        idx = 0
                        for count in face_counts:
                            if count >= 3:  # Only process triangles and quads
                                face_verts = []
                                for i in range(count):
                                    face_verts.append(str(face_indices[idx] + vertex_offset))
                                    idx += 1
                                faces.append(f"f {' '.join(face_verts)}")
                            else:
                                idx += count

                        vertex_offset += len(points)

                # Try to get normals
                normals_attr = mesh.GetNormalsAttr()
                if normals_attr:
                    normal_data = normals_attr.Get()
                    if normal_data:
                        for normal in normal_data:
                            normals.append(f"vn {normal[0]} {normal[1]} {normal[2]}")

                # Try to get UV coordinates
                primvars = mesh.GetPrimvars()
                for primvar in primvars:
                    if primvar.GetPrimvarName() in ['st', 'uv']:
                        uv_data = primvar.Get()
                        if uv_data:
                            for uv in uv_data:
                                uvs.append(f"vt {uv[0]} {uv[1]}")
                        break

        # Write OBJ file
        with open(obj_output_path, 'w') as obj_file:
            obj_file.write("# Converted from USDZ\n")
            obj_file.write("# Generated by USDZ to OBJ Converter\n\n")

            # Write vertices
            for vertex in vertices:
                obj_file.write(vertex + '\n')

            # Write normals
            if normals:
                obj_file.write('\n')
                for normal in normals:
                    obj_file.write(normal + '\n')

            # Write UV coordinates
            if uvs:
                obj_file.write('\n')
                for uv in uvs:
                    obj_file.write(uv + '\n')

            # Write faces
            if faces:
                obj_file.write('\n')
                for face in faces:
                    obj_file.write(face + '\n')

        return True

    except Exception as e:
        print(f"Error converting USD to OBJ: {e}")
        return False


def convert_usdz_to_obj_fallback(usdz_path, obj_output_path):
    """Fallback method using command line tools if available"""
    try:
        # Try using usdcat command line tool
        result = subprocess.run([
            'usdcat', '--flatten', usdz_path, '-o', obj_output_path.replace('.obj', '.usd')
        ], capture_output=True, text=True)

        if result.returncode == 0:
            print("Note: Converted to USD format. You may need additional tools to convert USD to OBJ.")
            return True
        else:
            return False
    except FileNotFoundError:
        return False


def convert_usdz_to_obj(input_folder, output_folder):
    """Convert all USDZ files in input folder to OBJ format"""

    if not check_dependencies():
        print("\nTrying fallback method...")

    # Create output folder if it doesn't exist
    Path(output_folder).mkdir(parents=True, exist_ok=True)

    # Get all USDZ files
    input_path = Path(input_folder)
    usdz_files = list(input_path.glob('*.usdz')) + list(input_path.glob('*.USDZ'))

    if not usdz_files:
        print(f"No USDZ files found in {input_folder}")
        return

    print(f"Found {len(usdz_files)} USDZ files to convert...")

    converted_count = 0
    failed_count = 0

    for usdz_file in usdz_files:
        try:
            print(f"Converting: {usdz_file.name}")

            # Create temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                # Extract USDZ
                if not extract_usdz(usdz_file, temp_dir):
                    print(f"✗ Failed to extract {usdz_file.name}")
                    failed_count += 1
                    continue

                # Find USD file
                usd_file = find_usd_file(temp_dir)
                if not usd_file:
                    print(f"✗ No USD file found in {usdz_file.name}")
                    failed_count += 1
                    continue

                # Generate output filename
                obj_filename = usdz_file.stem + '.obj'
                obj_output_path = Path(output_folder) / obj_filename

                # Convert USD to OBJ
                if convert_usd_to_obj(usd_file, str(obj_output_path)):
                    print(f"✓ Converted: {usdz_file.name} -> {obj_filename}")
                    converted_count += 1
                else:
                    # Try fallback method
                    if convert_usdz_to_obj_fallback(str(usdz_file), str(obj_output_path)):
                        print(f"✓ Converted (fallback): {usdz_file.name}")
                        converted_count += 1
                    else:
                        print(f"✗ Failed to convert {usdz_file.name}")
                        failed_count += 1

        except Exception as e:
            print(f"✗ Error processing {usdz_file.name}: {str(e)}")
            failed_count += 1

    print(f"\nConversion complete!")
    print(f"Successfully converted: {converted_count} files")
    if failed_count > 0:
        print(f"Failed to convert: {failed_count} files")


def main():
    print("USDZ to OBJ Converter")
    print("=" * 30)

    # Configure your paths here
    input_folder = input("Enter the path to your USDZ files folder: ").strip()
    output_folder = input("Enter the path to your output folder: ").strip()

    # Validate input folder exists
    if not os.path.exists(input_folder):
        print(f"Error: Input folder '{input_folder}' does not exist!")
        return

    print(f"\nStarting conversion...")
    print(f"Input folder: {input_folder}")
    print(f"Output folder: {output_folder}")
    print("-" * 50)

    convert_usdz_to_obj(input_folder, output_folder)


if __name__ == "__main__":
    main()